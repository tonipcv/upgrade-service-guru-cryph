generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(cuid())
  name                   String?
  email                  String    @unique
  password               String?
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  resetToken             String?
  resetTokenExpiry       DateTime?
  stripeCustomerId       String?     @unique
  subscriptionStatus     String    @default("free")
  subscriptionEndDate    DateTime?
  subscriptionId         String?
  whatsapp               String?     @unique
  whatsappVerified       Boolean     @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  exchange               String?
  onboardingCompleted    Boolean     @default(false)
  emailToken             String?     @unique
  emailTokenExpiry       DateTime?
  crypto_investment      String?
  discovery              String?
  level                  String?
  traditional_investment String?
  provider               String?
  Account                Account[]
  Portfolio              Portfolio[]
  Session                Session[]
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Crypto {
  id                       String    @id
  name                     String?
  symbol                   String?
  amount                   Float
  createdAt                DateTime  @default(now())
  portfolioId              String
  coinId                   String
  investedValue            Float
  updatedAt                DateTime
  currentPrice             Float     @default(0)
  profit                   Float     @default(0)
  averagePrice             Float     @default(0)
  image                    String?
  marketCap                Float?
  priceChangePercentage24h Float?
  priceChangePercentage7d  Float?
  totalVolume              Float?
  Portfolio                Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([coinId])
  @@index([portfolioId])
}

model Portfolio {
  id          String   @id
  name        String
  createdAt   DateTime @default(now())
  description String?
  updatedAt   DateTime
  totalProfit Float    @default(0)
  totalValue  Float    @default(0)
  userId      String
  Crypto      Crypto[]
  User        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
